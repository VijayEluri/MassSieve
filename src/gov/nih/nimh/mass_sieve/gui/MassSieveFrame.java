/*
 * MassSieveFrame.java
 *
 * Created on May 21, 2006, 6:16 PM
 */

package gov.nih.nimh.mass_sieve.gui;

import gov.nih.nimh.mass_sieve.*;
import java.awt.Component;
import java.awt.Cursor;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.ProgressMonitorInputStream;
import org.biojava.bio.BioException;
import org.biojava.bio.symbol.SymbolList;
import org.biojavax.Namespace;
import org.biojavax.RichObjectFactory;
import org.biojavax.bio.seq.RichSequence;
import org.biojavax.bio.seq.RichSequenceIterator;

/**
 *
 * @author  slotta
 */
public class MassSieveFrame extends javax.swing.JFrame {
    private String version = "MassSieve v0.96";
    private ExperimentPanel currentExperiment;
    private HashMap<String, ExperimentPanel> expSet;
    private boolean useDigest, useMultiColumnSort;
    private String digestName;
    private GraphLayoutType glType;
    private OptionsDialog optDialog;
    private BatchLoadDialog batchLoadDialog;
    private static HashMap<String, RichSequence> proteinDB  = new HashMap<String, RichSequence>();
    
    /** Creates new form MassSieveFrame */
    public MassSieveFrame() {
        initComponents();
        jFileChooserLoad.setMultiSelectionEnabled(true);
        jFileChooserLoad.setFileFilter(new MSFileFilter());
        jMenuAddSearchResults.setEnabled(false);
        jMenuOpenSeqDB.setEnabled(false);
        jMenuFilterPrefs.setEnabled(false);
        jMenuCompareDiff.setEnabled(false);
        jMenuCompareParsimony.setEnabled(false);
        jMenuExportSeqDB.setEnabled(false);
        jMenuShowSummary.setEnabled(false);
        useDigest = false;
        digestName = "Trypsin";
        useMultiColumnSort = false;
        glType = GraphLayoutType.NODE_LINK_TREE;
        optDialog = new OptionsDialog(this);
        batchLoadDialog = new BatchLoadDialog(this);
        expSet = new HashMap<String, ExperimentPanel>();
        setTitle(version);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        buttonGroupTreeSource = new javax.swing.ButtonGroup();
        jFileChooserLoad = new javax.swing.JFileChooser();
        jOptionPaneAbout = new javax.swing.JOptionPane();
        jTabbedPaneMain = new javax.swing.JTabbedPane();
        jMenuBarMain = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuNewExperiment = new javax.swing.JMenuItem();
        jMenuAddSearchResults = new javax.swing.JMenuItem();
        jMenuBatchLoad = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        jMenuOpenSeqDB = new javax.swing.JMenuItem();
        jMenuExportSeqDB = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuOptions = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        jMenuClose = new javax.swing.JMenuItem();
        jMenuQuit = new javax.swing.JMenuItem();
        jMenuTools = new javax.swing.JMenu();
        jMenuFilterPrefs = new javax.swing.JMenuItem();
        jMenuShowSummary = new javax.swing.JMenuItem();
        jSeparatorDetach = new javax.swing.JSeparator();
        jMenuDetachUpperWindow = new javax.swing.JMenuItem();
        jMenuDetachLowerWindow = new javax.swing.JMenuItem();
        jSeparatorCompare = new javax.swing.JSeparator();
        jMenuCompareDiff = new javax.swing.JMenuItem();
        jMenuCompareParsimony = new javax.swing.JMenuItem();
        jMenuHelp = new javax.swing.JMenu();
        jMenuGarbageCollect = new javax.swing.JMenuItem();
        jMenuAbout = new javax.swing.JMenuItem();

        jFileChooserLoad.setDialogTitle("Open Files");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MassSieve v0.8");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTabbedPaneMain.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jTabbedPaneMainComponentShown(evt);
            }
        });

        jMenuFile.setText("File");
        jMenuNewExperiment.setText("New Experiment");
        jMenuNewExperiment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuNewExperimentActionPerformed(evt);
            }
        });

        jMenuFile.add(jMenuNewExperiment);

        jMenuAddSearchResults.setText("Add Search Results...");
        jMenuAddSearchResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuAddSearchResultsActionPerformed(evt);
            }
        });

        jMenuFile.add(jMenuAddSearchResults);

        jMenuBatchLoad.setText("Batch Load");
        jMenuBatchLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuBatchLoadActionPerformed(evt);
            }
        });

        jMenuFile.add(jMenuBatchLoad);

        jMenuFile.add(jSeparator2);

        jMenuOpenSeqDB.setText("Import Fasta...");
        jMenuOpenSeqDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuOpenSeqDBActionPerformed(evt);
            }
        });

        jMenuFile.add(jMenuOpenSeqDB);

        jMenuExportSeqDB.setText("Export Fasta File...");
        jMenuExportSeqDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuExportSeqDBActionPerformed(evt);
            }
        });

        jMenuFile.add(jMenuExportSeqDB);

        jMenuFile.add(jSeparator1);

        jMenuOptions.setText("Set Options");
        jMenuOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuOptionsActionPerformed(evt);
            }
        });

        jMenuFile.add(jMenuOptions);

        jMenuFile.add(jSeparator3);

        jMenuClose.setText("Close Tab");
        jMenuClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuCloseActionPerformed(evt);
            }
        });

        jMenuFile.add(jMenuClose);

        jMenuQuit.setText("Quit");
        jMenuQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuQuitActionPerformed(evt);
            }
        });

        jMenuFile.add(jMenuQuit);

        jMenuBarMain.add(jMenuFile);

        jMenuTools.setText("Tools");
        jMenuFilterPrefs.setText("Change Filter");
        jMenuFilterPrefs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuFilterPrefsActionPerformed(evt);
            }
        });

        jMenuTools.add(jMenuFilterPrefs);

        jMenuShowSummary.setText("Experiment Summary");
        jMenuShowSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuShowSummaryActionPerformed(evt);
            }
        });

        jMenuTools.add(jMenuShowSummary);

        jMenuTools.add(jSeparatorDetach);

        jMenuDetachUpperWindow.setText("Detach Upper Window");
        jMenuDetachUpperWindow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuDetachUpperWindowActionPerformed(evt);
            }
        });

        jMenuTools.add(jMenuDetachUpperWindow);

        jMenuDetachLowerWindow.setText("Detach Lower Window");
        jMenuDetachLowerWindow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuDetachLowerWindowActionPerformed(evt);
            }
        });

        jMenuTools.add(jMenuDetachLowerWindow);

        jMenuTools.add(jSeparatorCompare);

        jMenuCompareDiff.setText("Compare Experiment Differences");
        jMenuCompareDiff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuCompareDiffActionPerformed(evt);
            }
        });

        jMenuTools.add(jMenuCompareDiff);

        jMenuCompareParsimony.setText("Compare Experiments w/Parsimony");
        jMenuCompareParsimony.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuCompareParsimonyActionPerformed(evt);
            }
        });

        jMenuTools.add(jMenuCompareParsimony);

        jMenuBarMain.add(jMenuTools);

        jMenuHelp.setText("Help");
        jMenuGarbageCollect.setText("Compact Memory");
        jMenuGarbageCollect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuGarbageCollectActionPerformed(evt);
            }
        });

        jMenuHelp.add(jMenuGarbageCollect);

        jMenuAbout.setText("About");
        jMenuAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuAboutActionPerformed(evt);
            }
        });

        jMenuHelp.add(jMenuAbout);

        jMenuBarMain.add(jMenuHelp);

        setJMenuBar(jMenuBarMain);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTabbedPaneMain, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTabbedPaneMain, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 679, Short.MAX_VALUE)
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void jMenuShowSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuShowSummaryActionPerformed
        currentExperiment = (ExperimentPanel)jTabbedPaneMain.getSelectedComponent();
        currentExperiment.showSummary();
    }//GEN-LAST:event_jMenuShowSummaryActionPerformed
    
    private void jMenuDetachUpperWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuDetachUpperWindowActionPerformed
        currentExperiment = (ExperimentPanel)jTabbedPaneMain.getSelectedComponent();
        currentExperiment.detachUpperWindow();
    }//GEN-LAST:event_jMenuDetachUpperWindowActionPerformed
    
    private void jMenuExportSeqDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuExportSeqDBActionPerformed
        int status = jFileChooserLoad.showSaveDialog(this);
        if (status == JFileChooser.APPROVE_OPTION) {
            File selectedFile = jFileChooserLoad.getSelectedFile();
            try {
                if (!selectedFile.createNewFile()) {
                    status = jOptionPaneAbout.showConfirmDialog(this,
                            selectedFile.getName() + " exists, are you sure you wish to overwrite it?",
                            "Overwrite?", JOptionPane.YES_NO_OPTION);
                    if (status != JOptionPane.OK_OPTION) return;
                }
                System.out.println("Exporting " + selectedFile.getName() + " as a FASTA formated file");
                FileOutputStream pOut = new FileOutputStream(selectedFile);
                BufferedOutputStream fos = new BufferedOutputStream(pOut);
                int seqCount = 0;
                HashSet<String> minProteins = new HashSet<String>();
                for (ExperimentPanel exp:expSet.values()) {
                    minProteins.addAll(exp.getProteins().keySet());
                }
                for (String prot:minProteins) {
                    RichSequence rs = proteinDB.get(prot);
                    if (rs != null) {
                        if (rs.length() > 0) {
                            RichSequence.IOTools.writeFasta(fos,rs,null);
                            seqCount++;
                        }
                    }
                }
                jOptionPaneAbout.showMessageDialog(this, "Exported " + seqCount + " sequences.");
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jMenuExportSeqDBActionPerformed
    
    private void jMenuDetachLowerWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuDetachLowerWindowActionPerformed
        currentExperiment = (ExperimentPanel)jTabbedPaneMain.getSelectedComponent();
        currentExperiment.detachLowerWindow();
    }//GEN-LAST:event_jMenuDetachLowerWindowActionPerformed
    
    private void jMenuBatchLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuBatchLoadActionPerformed
        batchLoadDialog.setVisible(true);
    }//GEN-LAST:event_jMenuBatchLoadActionPerformed
    
    private void jMenuGarbageCollectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuGarbageCollectActionPerformed
        System.gc();
    }//GEN-LAST:event_jMenuGarbageCollectActionPerformed
    
    private void jMenuOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuOptionsActionPerformed
        optDialog.setUseDigestBox(useDigest);
        optDialog.setProteaseCombo(digestName);
        optDialog.setGraphLayout(glType);
        optDialog.setVisible(true);
    }//GEN-LAST:event_jMenuOptionsActionPerformed
    
    private void jMenuCompareParsimonyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuCompareParsimonyActionPerformed
        ArrayList<PeptideHit> allHits = new ArrayList<PeptideHit>();
        Component comps[] = jTabbedPaneMain.getComponents();
        double maxMascot = Double.MIN_VALUE;
        double maxOmssa = Double.MIN_VALUE;
        double maxXtandem = Double.MIN_VALUE;
        for (Component comp:comps) {
            if (comp instanceof ExperimentPanel) {
                ExperimentPanel exp = (ExperimentPanel)comp;
                if (exp.getMascotCutoff() > maxMascot) maxMascot = exp.getMascotCutoff();
                if (exp.getOmssaCutoff() > maxOmssa) maxOmssa = exp.getOmssaCutoff();
                if (exp.getXtandemCutoff() > maxXtandem) maxXtandem = exp.getXtandemCutoff();
                allHits.addAll(exp.getPepCollection().getPeptideHits());
            }
        }
        currentExperiment = new ExperimentPanel(this);
        currentExperiment.setName("Parsimony Comparison");
        currentExperiment.setUseIonIdent(false);
        currentExperiment.setMascotCutoff(maxMascot);
        currentExperiment.setOmssaCutoff(maxOmssa);
        currentExperiment.setXtandemCutoff(maxXtandem);
        currentExperiment.addPeptideHits(allHits);
        expSet.put("Parsimony Comparison", currentExperiment);
        jTabbedPaneMain.add(currentExperiment);
        jTabbedPaneMain.setSelectedComponent(currentExperiment);
    }//GEN-LAST:event_jMenuCompareParsimonyActionPerformed
    
    private void jTabbedPaneMainComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTabbedPaneMainComponentShown
        if ((jTabbedPaneMain.getSelectedComponent() instanceof ExperimentPanel)) {
            jMenuAddSearchResults.setEnabled(true);
            jMenuOpenSeqDB.setEnabled(true);
            jMenuFilterPrefs.setEnabled(true);
        }
    }//GEN-LAST:event_jTabbedPaneMainComponentShown
    
    private void jMenuCompareDiffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuCompareDiffActionPerformed
        ListPanel cPanel = new ListPanel();
        cPanel.addProteinList(expSet);
        JScrollPane compare = cPanel.createTable();
        compare.setName("Differences Comparison");
        jTabbedPaneMain.add(compare);
        jTabbedPaneMain.setSelectedComponent(compare);
    }//GEN-LAST:event_jMenuCompareDiffActionPerformed
    
    private void jMenuNewExperimentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuNewExperimentActionPerformed
        javax.swing.JOptionPane optPane = new javax.swing.JOptionPane();
        String s = optPane.showInputDialog(this, "Experiment Name");
        if (s != null && s.length() > 0) {
            createExperiment(s);
        }
    }//GEN-LAST:event_jMenuNewExperimentActionPerformed
    
    public void createExperiment(String name) {
        if (expSet.containsKey(name)) {
            jOptionPaneAbout.showMessageDialog(MassSieveFrame.this, "There is already an experiment named " + name);
        } else {
            ExperimentPanel exp = new ExperimentPanel(this);
            exp.setName(name);
            this.createExperiment(exp);
        }
    }
    
    public void createExperiment(ExperimentPanel exp) {
        currentExperiment = exp;
        jTabbedPaneMain.add(currentExperiment);
        jTabbedPaneMain.setSelectedComponent(currentExperiment);
        jMenuAddSearchResults.setEnabled(true);
        jMenuOpenSeqDB.setEnabled(true);
        jMenuFilterPrefs.setEnabled(true);
        jMenuShowSummary.setEnabled(true);
        expSet.put(exp.getName(), currentExperiment);
        if (expSet.size() >= 2) {
            jMenuCompareDiff.setEnabled(true);
            jMenuCompareParsimony.setEnabled(true);
        }
    }
    
    private void jMenuFilterPrefsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuFilterPrefsActionPerformed
        currentExperiment = (ExperimentPanel)jTabbedPaneMain.getSelectedComponent();
        currentExperiment.showPreferences();
    }//GEN-LAST:event_jMenuFilterPrefsActionPerformed
    
    private void jMenuOpenSeqDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuOpenSeqDBActionPerformed
        int status = jFileChooserLoad.showOpenDialog(this);
        if (status == JFileChooser.APPROVE_OPTION) {
            File selectedFiles[] = jFileChooserLoad.getSelectedFiles();
            addSeqDBfiles(selectedFiles);
        }
        jMenuExportSeqDB.setEnabled(true);
    }//GEN-LAST:event_jMenuOpenSeqDBActionPerformed
    
    public void addSeqDBfiles(final File files[]) {
        new Thread(new Runnable() {
            public void run() {
                int seqCount = 0;
                int dupCount = 0;
                for (File f:files) {
                    System.err.println("Parsing " + f.getName() + " as the sequence database");
                    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    try {
                        // Not sure if your input is EMBL or Genbank? Load them both here.^M
                        //Class.forName("org.biojavax.bio.seq.io.EMBLFormat");
                        //Class.forName("org.biojavax.bio.seq.io.UniProtFormat");
                        //Class.forName("org.biojavax.bio.seq.io.UniProtXMLFormat");
                        //Class.forName("org.biojavax.bio.seq.io.GenbankFormat");
                        Class.forName("org.biojavax.bio.seq.io.FastaFormat");
                        
                        // Now let BioJavaX guess which format you actually should use (using the default namespace)
                        Namespace ns = RichObjectFactory.getDefaultNamespace();
                        ProgressMonitorInputStream pin = new ProgressMonitorInputStream(MassSieveFrame.this, "Loading " + f.getName(), new FileInputStream(f));
                        BufferedInputStream bin = new BufferedInputStream(pin);
                        RichSequenceIterator seqItr = RichSequence.IOTools.readStream(bin, ns);
                        while(seqItr.hasNext()) {
                            try {
                                RichSequence seq = seqItr.nextRichSequence();
                                String seqName = seq.getName();
                                if (proteinDB.containsKey(seqName)) {
                                    RichSequence daSeq = proteinDB.get(seqName);
                                    if (daSeq != null) {
                                        if (daSeq.getInternalSymbolList() != SymbolList.EMPTY_LIST ) dupCount++;
                                    }
                                    proteinDB.put(seqName, seq);
                                    System.err.println(seqName);
                                    seqCount++;
                                }
                            } catch (BioException ex) {
                                ex.printStackTrace();
                            }
                        }
                        System.err.println(f.getName() + " sequence database read complete!");
                    } catch (IOException ex) {
                        setCursor(null);
                        ex.printStackTrace();
                    } catch (ClassNotFoundException ex) {
                        ex.printStackTrace();
                    }
                    setCursor(null);
                }
                jOptionPaneAbout.showMessageDialog(MassSieveFrame.this, "Imported " + seqCount + " sequences, with " + dupCount + " duplicates.");
            }
        }).start();
    }
    
    public static void addProtein(String pname) {
        if (!proteinDB.containsKey(pname)) {
            proteinDB.put(pname, null);
        }
    }
    
    public static void addProtein(String pname, RichSequence rs) {
        if (!proteinDB.containsKey(pname)) {
            proteinDB.put(pname, rs);
        } else {
            RichSequence mainRS = proteinDB.get(pname);
            if (mainRS == null) {
                proteinDB.put(pname,rs);
            } else {
                if (mainRS.getDescription().length() < rs.getDescription().length()) {
                    mainRS.setDescription(rs.getDescription());
                }
            }
        }
    }
    
    public static RichSequence getProtein(String pname) {
        return proteinDB.get(pname);
    }
    
    private void jMenuCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuCloseActionPerformed
        Component current = jTabbedPaneMain.getSelectedComponent();
        jTabbedPaneMain.remove(current);
        if (current instanceof ExperimentPanel) {
            expSet.remove(current.getName());
            if (expSet.size() < 2) {
                jMenuCompareDiff.setEnabled(false);
                jMenuCompareParsimony.setEnabled(false);
            }
        }
        if (!(jTabbedPaneMain.getSelectedComponent() instanceof ExperimentPanel)) {
            jMenuAddSearchResults.setEnabled(false);
            jMenuOpenSeqDB.setEnabled(false);
            jMenuFilterPrefs.setEnabled(false);
            jMenuShowSummary.setEnabled(false);
        }
    }//GEN-LAST:event_jMenuCloseActionPerformed
    
    private void jMenuAddSearchResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuAddSearchResultsActionPerformed
        int status = jFileChooserLoad.showOpenDialog(this);
        if (status == JFileChooser.APPROVE_OPTION) {
            new Thread(new Runnable() {
                public void run() {
                    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    
                    File selectedFiles[] = jFileChooserLoad.getSelectedFiles();
                    currentExperiment = (ExperimentPanel)jTabbedPaneMain.getSelectedComponent();
                    currentExperiment.addFiles(selectedFiles);
                    setCursor(null);
                }
            }).start();
        }
    }//GEN-LAST:event_jMenuAddSearchResultsActionPerformed
    
    public void addExperimentAndFiles(ExperimentPanel defExp, String exp, File files[]) {
        if (expSet.containsKey(exp)) {
            currentExperiment = expSet.get(exp);
        } else {
            createExperiment(exp);
        }
        currentExperiment.cloneFilterSettings(defExp);
        currentExperiment.addFiles(files);
    }
    
    private void jMenuQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuQuitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuQuitActionPerformed
    
    private void jMenuAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuAboutActionPerformed
        jOptionPaneAbout.showMessageDialog(MassSieveFrame.this, version +
                "\nLNT/NIMH/NIH\nCreated by Douglas J. Slotta\n" +
                "\n" + checkAllocatedMem() +
                "\n" + checkAvailMem() +
                "\n" + checkMaxMem());
    }//GEN-LAST:event_jMenuAboutActionPerformed
    
    private String checkAllocatedMem() {
        long val = (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory())/1024;
        val /= 1024;
        String res = new String("Memory used: " + val + "MB");
        return res;
    }
    
    private String checkAvailMem() {
        long val = (Runtime.getRuntime().totalMemory())/1024;
        val /= 1024;
        String res = new String("Current memory available: " + val + "MB");
        return res;
    }
    
    private String checkMaxMem() {
        long val = (Runtime.getRuntime().maxMemory())/1024;
        val /= 1024;
        String res = new String("Max memory Availiable: " + val + "MB");
        return res;
    }
    
    public void setUseDigest(boolean b) {
        useDigest = b;
    }
    public void setDigestName(String s) {
        digestName = s;
    }
    public void setUseMultiColumnSort(boolean b) {
        useMultiColumnSort = b;
    }
    public boolean getUseDigest() {
        return useDigest;
    }
    public String getDigestName() {
        return digestName;
    }
    public boolean getUseMultiColumnSort() {
        return useMultiColumnSort;
    }
    public void setGraphLayout(GraphLayoutType glt) {
        glType = glt;
    }
    public GraphLayoutType getGraphLayout() {
        return glType;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MassSieveFrame().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupTreeSource;
    private javax.swing.JFileChooser jFileChooserLoad;
    private javax.swing.JMenuItem jMenuAbout;
    private javax.swing.JMenuItem jMenuAddSearchResults;
    private javax.swing.JMenuBar jMenuBarMain;
    private javax.swing.JMenuItem jMenuBatchLoad;
    private javax.swing.JMenuItem jMenuClose;
    private javax.swing.JMenuItem jMenuCompareDiff;
    private javax.swing.JMenuItem jMenuCompareParsimony;
    private javax.swing.JMenuItem jMenuDetachLowerWindow;
    private javax.swing.JMenuItem jMenuDetachUpperWindow;
    private javax.swing.JMenuItem jMenuExportSeqDB;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuFilterPrefs;
    private javax.swing.JMenuItem jMenuGarbageCollect;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JMenuItem jMenuNewExperiment;
    private javax.swing.JMenuItem jMenuOpenSeqDB;
    private javax.swing.JMenuItem jMenuOptions;
    private javax.swing.JMenuItem jMenuQuit;
    private javax.swing.JMenuItem jMenuShowSummary;
    private javax.swing.JMenu jMenuTools;
    private javax.swing.JOptionPane jOptionPaneAbout;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparatorCompare;
    private javax.swing.JSeparator jSeparatorDetach;
    private javax.swing.JTabbedPane jTabbedPaneMain;
    // End of variables declaration//GEN-END:variables
    
}
